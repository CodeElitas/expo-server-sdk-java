plugins {
  id 'java-library'
  id 'maven-publish'
  id 'signing'
}

ext {
  commonsLangVersion = '3.12.0'
  isReleaseVersion = !version.endsWith("SNAPSHOT")
  jacksonVersion = '2.13.4'
  junitVersion = '5.8.2'
}

group = 'com.nia_medtech.oss'

repositories {
  mavenCentral()
}

dependencies {
  implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
  implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
  implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
  
  testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
  testImplementation 'org.mockito:mockito-core:3.3.3'
  
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

java {
  withJavadocJar()
  withSourcesJar()
}

test {
  useJUnitPlatform()
}

artifacts {
  archives javadocJar, sourcesJar
}


signing {
  required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
  def signingKey = findProperty("signingKey")
  def signingPassword = findProperty("signingPassword")
  useInMemoryPgpKeys(signingKey, signingPassword)
  sign configurations.archives
}

publishing {
  repositories {
    maven {
      name = "ossrh"
      url = isReleaseVersion ? project.ossrhReleaseRepoUrl : project.ossrhSnapshotRepoUrl
      credentials {
        username findProperty("ossrhUsername")
        password findProperty("ossrhPassword")
      }
    }
    
    maven {
      name = "nexus"
      url = isReleaseVersion ? project.nexusReleaseRepoUrl : project.nexusSnapshotRepoUrl
      credentials {
        username findProperty("nexusUsername")
        password findProperty("nexusPassword")
      }
    }
  }
  
  publications {
    mavenJava(MavenPublication) {
      pom {
        name = 'expo-server-sdk'
        description = 'Java implementation of expo-server-sdk implementation.Classes and methods to manage push notifications'
        url = 'https://github.com/nia-medtech/expo-server-sdk-java'
 
        licenses {
            license {
                name = 'The MIT License'
                url = 'https://raw.githubusercontent.com/nia-medtech/expo-server-sdk-java/edit/main/LICENCE.txt'
            }
        }
        developers {
            developer {
                id = 'oliverwelter'
                name = 'Oliver Welter'
                email = 'oliver.welter@nia-medtech.com'
            }
        }
        scm {
            connection = 'scm:git:git@github.com:nia-medtech/expo-server-sdk-java.git'
            developerConnection = 'scm:git:git@github.com:nia-medtech/expo-server-sdk-java.git'
            url = 'scm:git:git@github.com:nia-medtech/expo-server-sdk-java.git'
          }
      }
      
      pom.withXml {
        def pomFile = file("${project.buildDir}/generated-pom.xml")
        writeTo(pomFile)
        def pomAscFile = signing.sign(pomFile).signatureFiles[0]
        artifact(pomAscFile) {
          classifier = null
          extension = 'pom.asc'
        }
      }
      
      project.tasks.signArchives.signatureFiles.each {
        artifact(it) {
          def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
          if (matcher.find()) {
            classifier = matcher.group(1)
          } else {
            classifier = null
          }
          extension = 'jar.asc'
        }
      }
    }
  }
}